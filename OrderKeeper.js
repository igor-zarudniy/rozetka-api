const PROJECT_ID = '1n-OJR0yWGvLK-3GUePfQlj_LI7g1q4T5WeHUJy7P0yQ'
const FILES_FOLDER_ID = '1Q8DqJGifnvGsa6DDJXBwBw4kfGmga4DO'
const MAIN_SHEET = 'üõí –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è'

function testCreateOrders() {
  const requestData = {
    "header": {
      "comment": "–î–æ—Å—Ç–∞–≤–∏—Ç–∏ –ø—ñ—Å–ª—è 18:00, –ø–æ–¥–∑–≤–æ–Ω–∏—Ç–∏ –∑–∞ –≥–æ–¥–∏–Ω—É",
      "isFileRequired": true,
      "partnerOrderId": "ROZ123456789",
      "deliveryAddresType": "DropShipping",
      "cashOnDelivery": 0,
      "deliveryAddressId": "12345",
      "deliveryCompanyName": "–ù–æ–≤–∞ –ü–æ—à—Ç–∞",
      "CustomerName": "–Ü–≤–∞–Ω –ü–µ—Ç—Ä–µ–Ω–∫–æ",
      "deliveryCity": "–ö–∏—ó–≤",
      "deliveryPhone": "+380501234567",
      "deliveryStreet": "–≤—É–ª. –•—Ä–µ—â–∞—Ç–∏–∫, –±—É–¥. 1, –∫–≤. 10",
      "products": [
        {
          "supplier_code": "SUP12345",
          "RZ_code": "11254855",
          "quantity": 2,
          "price": 100.50
        },
        {
          "supplier_code": "SUP67890",
          "RZ_code": "11254800",
          "quantity": 1,
          "price": 250.00
        }
      ]
    }
  }

  console.log(OrderKeeper.deleteFile('1hR4PweHB71vUNO5i0Nw9IuX8lvEALS1f'))
}


class OrderKeeper {
  /** –°—Ç–≤–æ—Ä—é—î –Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
   * @param {Object} orderData - –î–∞–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ –†–æ–∑–µ—Ç–∫–∏
   * @returns {ContentService.TextOutput} - –í—ñ–¥–ø–æ–≤—ñ–¥—å –ø—Ä–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è*/
  static createOrder(orderData) {
    const validation = this.validateOrderData(orderData);
    if (!validation.valid)
      return Response.error(validation.error, 400);

    // –°–ø–æ—á–∞—Ç–∫—É –æ–±—Ä–æ–±–ª—è—î–º–æ —Ç–æ–≤–∞—Ä–∏ —Ç–∞ –æ—Ç—Ä–∏–º—É—î–º–æ reservedQuantity
    const orderItems = this.processOrderItems(orderData.header.products);
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ products –∑ order_quantity (–∑–∞–ø–∏—Ç–∞–Ω–æ) —Ç–∞ quantity (–∑–∞—Ä–µ–∑–µ—Ä–≤–æ–≤–∞–Ω–æ)
    const productsWithReserved = orderItems.map(item => ({
      supplier_code: item.supplier_code,
      RZ_code: item.RZ_code,
      order_quantity: item.quantity,        // –°–∫—ñ–ª—å–∫–∏ –†–æ–∑–µ—Ç–∫–∞ –∑–∞–ø–∏—Ç–∞–ª–∞
      quantity: item.reservedQuantity,      // –°–∫—ñ–ª—å–∫–∏ –º–∏ –∑–∞—Ä–µ–∑–µ—Ä–≤—É–≤–∞–ª–∏
      price: item.price
    }));
    
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ –æ–±–æ–º–∞ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ
    orderData.header.products = productsWithReserved;
    const guid = this.saveOrderToSheet(orderData);
    
    // –°–ø–æ–≤—ñ—â–∞—î–º–æ –≤ Telegram –ø—Ä–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    TelegramManager.notifyOrderCreated(orderData.header.partnerOrderId, orderItems);
    return Response.created(guid, orderItems);
  }


  /** –í–∞–ª—ñ–¥—É—î –¥–∞–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
   * @param {Object} data - –û–±'—î–∫—Ç –∑ –¥–∞–Ω–∏–º–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
   * @returns {Object} - –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó*/
  static validateOrderData(data) {
    if (!data.header)
      return { valid: false, error: '–ù–µ–¥—ñ–π—Å–Ω—ñ –¥–∞–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è' };

    if (!data.header.products || !Array.isArray(data.header.products))
      return { valid: false, error: '–ù–µ–¥—ñ–π—Å–Ω—ñ –¥–∞–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è' };

    if (data.header.products.length === 0)
      return { valid: false, error: '–ù–µ–¥—ñ–π—Å–Ω—ñ –¥–∞–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è' };

    if (!data.header.partnerOrderId)
      return { valid: false, error: '–ù–µ–¥—ñ–π—Å–Ω—ñ –¥–∞–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è' };

    return { valid: true };
  }

  /** –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î –º–∞—Å–∏–≤ —Ç–æ–≤–∞—Ä—ñ–≤ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ –æ–∫—Ä–µ–º—ñ –ø–æ–ª—è –∑ –æ–±'—î–¥–Ω–∞–Ω–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏
   * @param {Object} orderData - –û–±'—î–∫—Ç –∑ –¥–∞–Ω–∏–º–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
   * @param {Object} orderData.header - –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ –¥–∞–Ω–∏–º–∏ –∫–ª—ñ—î–Ω—Ç–∞ —Ç–∞ —Ç–æ–≤–∞—Ä–∞–º–∏
   * @returns {Object} - –û–±'—î–∫—Ç –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ —Ä–æ–∑–≥–æ—Ä–Ω—É—Ç–∏–º–∏ –ø–æ–ª—è–º–∏ products (–∑–Ω–∞—á–µ–Ω–Ω—è —á–µ—Ä–µ–∑ \n)*/
  static flattenOrder(orderData, status = 'created', uuid) {
    let guid = !uuid ? Utilities.getUuid() : uuid;
    console.warn({ guid })
    let products = orderData.products
    let productKeys = Object.keys(products[0]);
    let preparedOrder = {};

    for (let keyIndex = 0; keyIndex < productKeys.length; keyIndex++) {
      const key = productKeys[keyIndex];
      const values = [];

      for (let productIndex = 0; productIndex < products.length; productIndex++) {
        const value = products[productIndex][key];
        values.push(value !== undefined && value !== null ? value : '');
      }

      preparedOrder[key] = values.join('\n');
    }

    preparedOrder = { ...preparedOrder, ...orderData, guid }
    delete preparedOrder.products
    delete preparedOrder.deliveryAddresType
    preparedOrder.status = status
    preparedOrder.date = DateManager.createCurrentDate()
    return preparedOrder
  }

  /** –ó–±–µ—Ä—ñ–≥–∞—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ Google Sheets
   * @param {Object} orderData - –î–∞–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ –†–æ–∑–µ—Ç–∫–∏*/
  static saveOrderToSheet(orderData) {
    const localizer = InputKeeper.readSheetData(PROJECT_ID, 'üåêLocalizer').sheetData
    const preparedOrder = this.flattenOrder(orderData.header)
    const headerMap = InputKeeper.createMapToStop(localizer, 'localizer', MAIN_SHEET)
    const { sheetRange, sheetData } = InputKeeper.readSheetData(PROJECT_ID, MAIN_SHEET)
    InputKeeper.mapHeadersToCoordinates(sheetData, headerMap)
    sheetRange.insertRowBefore(2)
    const array = [];

    for (let key in headerMap) {
      const elIndex = headerMap[key].colIndex;
      const value = preparedOrder[key];
      if (value === undefined || value === null || value === '') continue
      array[elIndex] = value;
    }
    sheetRange.getRange(2, 1, 1, array.length).setValues([array])
    return preparedOrder.guid
  }

  /** –û–±—Ä–æ–±–ª—è—î —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é –∑–∞–ª–∏—à–∫—ñ–≤ –Ω–∞ —Å–∫–ª–∞–¥—ñ
   * @param {Array} products - –ú–∞—Å–∏–≤ —Ç–æ–≤–∞—Ä—ñ–≤
   * @returns {Array} - –ú–∞—Å–∏–≤ –æ–±—Ä–æ–±–ª–µ–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ –∑ —Ä–µ–∞–ª—å–Ω–∏–º–∏ reservedQuantity
   */
  static processOrderItems(products) {
    const processedItems = [];
    const stocks = StockKeeper.trackStocks();

    for (let index = 0; index < products.length; index++) {
      const product = products[index];
      
      // –û—Ç—Ä–∏–º—É—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–∞ —Å–∫–ª–∞–¥—ñ
      const availableStock = stocks[product.supplier_code] || 0;
      
      // –†–µ–∑–µ—Ä–≤—É—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ç–µ —â–æ —î –Ω–∞ —Å–∫–ª–∞–¥—ñ (–∞–ª–µ –Ω–µ –±—ñ–ª—å—à–µ –Ω—ñ–∂ –∑–∞–ø–∏—Ç–∞–Ω–æ)
      const reservedQuantity = Math.min(product.quantity, availableStock);
      
      // –Ø–∫—â–æ –∑–∞—Ä–µ–∑–µ—Ä–≤–æ–≤–∞–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—ñ–≤–ø–∞–¥–∞—î –∑ –∑–∞–ø–∏—Ç–∞–Ω–æ—é - true, —ñ–Ω–∞–∫—à–µ - false
      const result = reservedQuantity === product.quantity;

      const item = {
        supplier_code: product.supplier_code,
        RZ_code: product.RZ_code,
        price: product.price,
        quantity: product.quantity,
        reservedPrice: product.price,
        reservedQuantity: reservedQuantity,
        result: result
      };

      processedItems.push(item);
    }

    return processedItems;
  }

  /** –°–∫–∞—Å–æ–≤—É—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞ GUID
   * @param {string} guid - –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
   * @returns {ContentService.TextOutput} - –í—ñ–¥–ø–æ–≤—ñ–¥—å –ø—Ä–æ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è*/
  static cancelOrder(guid) {
    const { sheetRange, sheetData } = InputKeeper.readSheetData(PROJECT_ID, MAIN_SHEET)
    const coordinates = InputKeeper.findHeaderCoordinates(sheetData, guid)
    if (!coordinates?.colIndex) return Response.error('–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ', 400)

    const localizer = InputKeeper.readSheetData(PROJECT_ID, 'üåêLocalizer').sheetData
    const headerMap = InputKeeper.createMapToStop(localizer, 'localizer', MAIN_SHEET)
    InputKeeper.mapHeadersToCoordinates(sheetData, headerMap)

    const rowIndex = coordinates.rowIndex
    const partnerOrderId = sheetData[rowIndex][headerMap.partnerOrderId.colIndex]

    sheetRange.getRange(rowIndex + 1, headerMap.status.colIndex + 1).setValue('canceled')

    TelegramManager.notifyOrderCanceled(partnerOrderId)

    return Response.canceled(guid)
  }

  /** –†–µ–¥–∞–≥—É—î —ñ—Å–Ω—É—é—á–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ Google Sheets
   * –ó–Ω–∞—Ö–æ–¥–∏—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞ GUID —Ç–∞ –æ–Ω–æ–≤–ª—é—î —Ç—ñ–ª—å–∫–∏ –∑–º—ñ–Ω–µ–Ω—ñ –ø–æ–ª—è
   * @param {string} guid - –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
   * @param {Object} requestData - –û–±'—î–∫—Ç –∑ –¥–∞–Ω–∏–º–∏ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
   * @returns {ContentService.TextOutput} - JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è–º –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–±–æ –ø–æ–º–∏–ª–∫–∞ 404*/
  static editOrder(guid, requestData) {
    const { sheetRange, sheetData } = InputKeeper.readSheetData(PROJECT_ID, MAIN_SHEET)
    const coordinates = InputKeeper.findHeaderCoordinates(sheetData, guid)
    if (!coordinates?.colIndex) return Response.error('–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ', 404)

    // –û–±—Ä–æ–±–ª—è—î–º–æ —Ç–æ–≤–∞—Ä–∏ —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–∞–ª–∏—à–∫–∏ (—è–∫ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ)
    const orderItems = this.processOrderItems(requestData.products)
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ products –∑ order_quantity (–∑–∞–ø–∏—Ç–∞–Ω–æ) —Ç–∞ quantity (–∑–∞—Ä–µ–∑–µ—Ä–≤–æ–≤–∞–Ω–æ)
    const productsWithReserved = orderItems.map(item => ({
      supplier_code: item.supplier_code,
      RZ_code: item.RZ_code,
      order_quantity: item.quantity,        // –°–∫—ñ–ª—å–∫–∏ –†–æ–∑–µ—Ç–∫–∞ –∑–∞–ø–∏—Ç–∞–ª–∞
      quantity: item.reservedQuantity,      // –°–∫—ñ–ª—å–∫–∏ –º–∏ –∑–∞—Ä–µ–∑–µ—Ä–≤—É–≤–∞–ª–∏
      price: item.price
    }))
    
    requestData.products = productsWithReserved
    const preparedOrder = this.flattenOrder(requestData, 'created', guid)
    
    const localizer = InputKeeper.readSheetData(PROJECT_ID, 'üåêLocalizer').sheetData
    const headerMap = InputKeeper.createMapToStop(localizer, 'localizer', MAIN_SHEET)
    InputKeeper.mapHeadersToCoordinates(sheetData, headerMap)

    for (let key in headerMap) {
      if (key === 'date') continue
      const colIndex = headerMap[key].colIndex
      const rowIndex = coordinates.rowIndex
      const value = preparedOrder[key]
      const currentValue = sheetData[rowIndex][colIndex]
      if (value === undefined || value === null || value === '') continue
      if (value === currentValue) continue

      sheetRange.getRange(rowIndex + 1, colIndex + 1).setValue(value)
    }
    
    const orderId = sheetData[coordinates.rowIndex][headerMap.partnerOrderId.colIndex]
    TelegramManager.notifyOrderEdited(orderId, orderItems)

    return Response.created(guid, orderItems)
  }

  /** –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —Ñ–∞–π–ª –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ Google Drive
   * @param {string} guid - –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
   * @param {Object} filePayload - –û–±'—î–∫—Ç –∑ base64 –¥–∞–Ω–∏–º–∏ —Ñ–∞–π–ª—É
   * @returns {ContentService.TextOutput} - JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑ file_guid –∞–±–æ –ø–æ–º–∏–ª–∫–∞ 404*/
  static uploadFile(guid, filePayload) {
    const { sheetRange, sheetData } = InputKeeper.readSheetData(PROJECT_ID, MAIN_SHEET)
    const coordinates = InputKeeper.findHeaderCoordinates(sheetData, guid)
    if (!coordinates?.colIndex) return Response.error('–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ', 404)

    try {
      if (!filePayload.fileData || !filePayload.isBase64) {
        return Response.error('–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª—É', 400);
      }

      const fileName = `order_${guid}_${DateManager.createCurrentDate()}`;
      const mimeType = filePayload.mimeType || 'application/octet-stream';
      const binaryData = Utilities.base64Decode(filePayload.fileData);

      const fileBlob = Utilities.newBlob(binaryData, mimeType, fileName);

      console.log(`–°—Ç–≤–æ—Ä—é—î–º–æ —Ñ–∞–π–ª: ${fileName}, MIME: ${mimeType}, –†–æ–∑–º—ñ—Ä blob: ${fileBlob.getBytes().length} –±–∞–π—Ç`);

      const fileMetadata = {
        name: fileName,
        parents: [FILES_FOLDER_ID],
        mimeType: mimeType
      };

      const file = Drive.Files.create(fileMetadata, fileBlob, {
        fields: 'id,name,size,mimeType'
      });

      const fileGuid = file.id;

      console.log(`–§–∞–π–ª —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: ${fileGuid}, —Ä–æ–∑–º—ñ—Ä: ${file.size} –±–∞–π—Ç, –Ω–∞–∑–≤–∞: ${file.name}`);

      const localizer = InputKeeper.readSheetData(PROJECT_ID, 'üåêLocalizer').sheetData
      const headerMap = InputKeeper.createMapToStop(localizer, 'localizer', MAIN_SHEET)
      InputKeeper.mapHeadersToCoordinates(sheetData, headerMap)

      const rowIndex = coordinates.rowIndex
      const partnerOrderId = sheetData[rowIndex][headerMap.partnerOrderId.colIndex]

      if (headerMap.file_guid) {
        const colIndex = headerMap.file_guid.colIndex + 1
        const fileIndex = headerMap.file_url.colIndex + 1
        sheetRange.getRange(rowIndex + 1, colIndex).setValue(fileGuid)
        sheetRange.getRange(rowIndex + 1, fileIndex).setValue(`https://drive.google.com/file/d/${fileGuid}`)
      }


      TelegramManager.notifyFileUploaded(partnerOrderId, fileGuid)

      return Response.fileUploaded(fileGuid);

    } catch (error) {
      console.log('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ñ–∞–π–ª—É: ' + error.toString());
      console.log('Stack trace: ' + error.stack);
      return Response.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ñ–∞–π–ª—É: ' + error.message, 500);
    }
  }

  /** –í–∏–¥–∞–ª—è—î —Ñ–∞–π–ª –∑ Google Drive —Ç–∞ –æ—á–∏—â—É—î –¥–∞–Ω—ñ –≤ —Ç–∞–±–ª–∏—Ü—ñ
   * @param {string} fileGuid - –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —Ñ–∞–π–ª—É –≤ Google Drive
   * @returns {ContentService.TextOutput} - JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è–º –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∞–±–æ –ø–æ–º–∏–ª–∫–∞ 404*/
  static deleteFile(fileGuid) {
    try {
      Drive.Files.remove(fileGuid)
      const { sheetRange, sheetData } = InputKeeper.readSheetData(PROJECT_ID, MAIN_SHEET);
      const coordinates = InputKeeper.findHeaderCoordinates(sheetData, fileGuid);
      const localizer = InputKeeper.readSheetData(PROJECT_ID, 'üåêLocalizer').sheetData;
      const headerMap = InputKeeper.createMapToStop(localizer, 'localizer', MAIN_SHEET);
      InputKeeper.mapHeadersToCoordinates(sheetData, headerMap);
      console.warn()
      const rowIndex = coordinates?.rowIndex;

      if (rowIndex) {
        sheetRange.getRange(rowIndex + 1, headerMap.file_guid.colIndex + 1).clearContent();
        sheetRange.getRange(rowIndex + 1, headerMap.file_url.colIndex + 1).clearContent();
      }

      TelegramManager.notifyFileDeleted(fileGuid)

      return Response.fileDeleted();

    } catch (error) {
      console.log('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ —Ñ–∞–π–ª—É: ' + error.toString());
      console.log('Stack trace: ' + error.stack);
      return Response.error('–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ', 404);
    }
  }

  /** –û—Ç—Ä–∏–º—É—î —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞ GUID
   * @param {string} guid - –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
   * @returns {ContentService.TextOutput} - JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∞–±–æ –ø–æ–º–∏–ª–∫–∞ 404*/
  static getOrderStatus(guid) {
    const { sheetData } = InputKeeper.readSheetData(PROJECT_ID, MAIN_SHEET);
    const localizer = InputKeeper.readSheetData(PROJECT_ID, 'üåêLocalizer').sheetData;
    const headerMap = InputKeeper.createMapToStop(localizer, 'localizer', MAIN_SHEET);
    InputKeeper.mapHeadersToCoordinates(sheetData, headerMap);
    const coordinates = InputKeeper.findHeaderCoordinates(sheetData, guid);
    console.warn({ coordinates })
    if (!coordinates?.colIndex) {
      return Response.error('–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ', 404);
    }

    const rowIndex = coordinates.rowIndex;
    const orderData = {};
    for (let key in headerMap) {
      const colIndex = headerMap[key].colIndex;
      orderData[key] = sheetData[rowIndex][colIndex];
    }

    const supplierCodes = (orderData.supplier_code || '').toString().split('\n');
    const rzCodes = (orderData.RZ_code || '').toString().split('\n');
    const quantities = (orderData.quantity || '').toString().split('\n');
    const allSerialNumbers = (orderData.SerialNumber || '').toString()
      .split(',')
      .map(sn => sn.trim())
      .filter(sn => sn.length > 0);

    const products = [];
    let serialNumberIndex = 0; 

    for (let i = 0; i < supplierCodes.length; i++) {
      if (!supplierCodes[i]) continue;

      const quantity = parseInt(quantities[i]) || 0;
      const productSerialNumbers = [];
      for (let j = 0; j < quantity; j++) {
        if (serialNumberIndex < allSerialNumbers.length) {
          productSerialNumbers.push(allSerialNumbers[serialNumberIndex]);
          serialNumberIndex++;
        }
      }

      products.push({
        supplier_code: supplierCodes[i].trim(),
        RZ_code: parseInt(rzCodes[i]) || rzCodes[i],
        quantity: quantity,
        reservedQuantity: quantity,
        SerialNumber: productSerialNumbers
      });
    }

    const status = orderData.status || 'created';
    if (status === 'created' || status === 'updated') {
      return Response.orderStatusPending(guid, status);
    }

    if (status === 'shipped') {
      return Response.orderStatus(
        guid,
        status,
        orderData.tracking_number || '',
        products
      );
    }

    return Response.orderStatusPending(guid, status);
  }
}