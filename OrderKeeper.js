const PROJECT_ID = '1n-OJR0yWGvLK-3GUePfQlj_LI7g1q4T5WeHUJy7P0yQ'

class OrderKeeper {
  /** –°—Ç–≤–æ—Ä—é—î –Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
   * @param {Object} orderData - –î–∞–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ –†–æ–∑–µ—Ç–∫–∏
   * @returns {ContentService.TextOutput} - –í—ñ–¥–ø–æ–≤—ñ–¥—å –ø—Ä–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è*/
  static createOrder(orderData) {
    const validation = this.validateOrderData(orderData);
    if (!validation.valid)
      return Response.error(validation.error, 400);

    const guid = this.saveOrderToSheet(orderData);
    const orderItems = this.processOrderItems(orderData.header.products);
    return Response.created(guid, orderItems);
  }


  /** –í–∞–ª—ñ–¥—É—î –¥–∞–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
   * @param {Object} data - –û–±'—î–∫—Ç –∑ –¥–∞–Ω–∏–º–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
   * @returns {Object} - –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó*/
  static validateOrderData(data) {
    if (!data.header)
      return { valid: false, error: '–ù–µ–¥—ñ–π—Å–Ω—ñ –¥–∞–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è' };

    if (!data.header.products || !Array.isArray(data.header.products))
      return { valid: false, error: '–ù–µ–¥—ñ–π—Å–Ω—ñ –¥–∞–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è' };

    if (data.header.products.length === 0)
      return { valid: false, error: '–ù–µ–¥—ñ–π—Å–Ω—ñ –¥–∞–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è' };

    if (!data.header.partnerOrderId)
      return { valid: false, error: '–ù–µ–¥—ñ–π—Å–Ω—ñ –¥–∞–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è' };

    return { valid: true };
  }

  /** –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î –º–∞—Å–∏–≤ —Ç–æ–≤–∞—Ä—ñ–≤ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ –æ–∫—Ä–µ–º—ñ –ø–æ–ª—è –∑ –æ–±'—î–¥–Ω–∞–Ω–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏
   * @param {Object} orderData - –û–±'—î–∫—Ç –∑ –¥–∞–Ω–∏–º–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
   * @param {Object} orderData.header - –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ –¥–∞–Ω–∏–º–∏ –∫–ª—ñ—î–Ω—Ç–∞ —Ç–∞ —Ç–æ–≤–∞—Ä–∞–º–∏
   * @returns {Object} - –û–±'—î–∫—Ç –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ —Ä–æ–∑–≥–æ—Ä–Ω—É—Ç–∏–º–∏ –ø–æ–ª—è–º–∏ products (–∑–Ω–∞—á–µ–Ω–Ω—è —á–µ—Ä–µ–∑ \n)*/
  static flattenOrder(orderData, status = 'created', uuid) {
    let guid = !uuid ? Utilities.getUuid() : uuid;
    let products = orderData.products
    let productKeys = Object.keys(products[0]);
    let preparedOrder = {};

    for (let keyIndex = 0; keyIndex < productKeys.length; keyIndex++) {
      const key = productKeys[keyIndex];
      const values = [];

      for (let productIndex = 0; productIndex < products.length; productIndex++) {
        values.push(products[productIndex][key] || '');
      }

      preparedOrder[key] = values.join('\n');
    }

    preparedOrder = { ...preparedOrder, ...orderData, guid }
    delete preparedOrder.products
    delete preparedOrder.deliveryAddresType
    preparedOrder.status = status
    preparedOrder.date = DateManager.createCurrentDate()
    return preparedOrder
  }

  /** –ó–±–µ—Ä—ñ–≥–∞—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ Google Sheets
   * @param {Object} orderData - –î–∞–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ –†–æ–∑–µ—Ç–∫–∏*/
  static saveOrderToSheet(orderData) {
    const localizer = InputKeeper.readSheetData(PROJECT_ID, 'üåêLocalizer').sheetData
    const preparedOrder = this.flattenOrder(orderData.header)
    const headerMap = InputKeeper.createMapToStop(localizer, 'localizer', 'Orders')
    const { sheetRange, sheetData } = InputKeeper.readSheetData(PROJECT_ID, 'Orders')
    InputKeeper.mapHeadersToCoordinates(sheetData, headerMap)
    sheetRange.insertRowBefore(2)
    const array = [];

    for (let key in headerMap) {
      const elIndex = headerMap[key].colIndex;
      const value = preparedOrder[key];
      array[elIndex] = value;
    }
    sheetRange.getRange(2, 1, 1, array.length).setValues([array])
    return orderData.guid
  }

  /** –û–±—Ä–æ–±–ª—è—î —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
   * @param {Array} products - –ú–∞—Å–∏–≤ —Ç–æ–≤–∞—Ä—ñ–≤
   * @returns {Array} - –ú–∞—Å–∏–≤ –æ–±—Ä–æ–±–ª–µ–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤
   */
  static processOrderItems(products) {
    const processedItems = [];

    for (let index = 0; index < products.length; index++) {
      const product = products[index];

      const item = {
        supplier_code: product.supplier_code,
        RZ_code: product.RZ_code,
        price: product.price,
        quantity: product.quantity,
        reservedPrice: product.price,
        reservedQuantity: product.quantity,
        result: true
      };

      processedItems.push(item);
    }

    return processedItems;
  }

  /** –°–∫–∞—Å–æ–≤—É—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞ GUID
   * @param {string} guid - –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
   * @returns {ContentService.TextOutput} - –í—ñ–¥–ø–æ–≤—ñ–¥—å –ø—Ä–æ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è*/
  static cancelOrder(guid) {
    const { sheetRange, sheetData } = InputKeeper.readSheetData(PROJECT_ID, 'Orders')
    const coordinates = InputKeeper.findHeaderCoordinates(sheetData, guid)
    if (!coordinates?.colIndex) return Response.error('–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ', 404)

    const localizer = InputKeeper.readSheetData(PROJECT_ID, 'üåêLocalizer').sheetData
    const headerMap = InputKeeper.createMapToStop(localizer, 'localizer', 'Orders')
    InputKeeper.mapHeadersToCoordinates(sheetData, headerMap)
    sheetRange.getRange(coordinates.rowIndex + 1, headerMap.status.colIndex + 1).setValue('canceled')
    return Response.canceled(guid)
  }

  /** –†–µ–¥–∞–≥—É—î —ñ—Å–Ω—É—é—á–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ Google Sheets
   * –ó–Ω–∞—Ö–æ–¥–∏—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞ GUID —Ç–∞ –æ–Ω–æ–≤–ª—é—î —Ç—ñ–ª—å–∫–∏ –∑–º—ñ–Ω–µ–Ω—ñ –ø–æ–ª—è
   * @param {string} guid - –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
   * @param {Object} requestData - –û–±'—î–∫—Ç –∑ –¥–∞–Ω–∏–º–∏ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
   * @returns {ContentService.TextOutput} - JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è–º –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–±–æ –ø–æ–º–∏–ª–∫–∞ 404*/
  static editOrder(guid, requestData) {
    const { sheetRange, sheetData } = InputKeeper.readSheetData(PROJECT_ID, 'Orders')
    const coordinates = InputKeeper.findHeaderCoordinates(sheetData, guid)
    if (!coordinates?.colIndex) return Response.error('–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ', 404)

    const preparedOrder = this.flattenOrder(requestData, 'pending', guid)
    const localizer = InputKeeper.readSheetData(PROJECT_ID, 'üåêLocalizer').sheetData
    const headerMap = InputKeeper.createMapToStop(localizer, 'localizer', 'Orders')
    InputKeeper.mapHeadersToCoordinates(sheetData, headerMap)

    for (let key in headerMap) {
      if (key === 'date') continue
      const colIndex = headerMap[key].colIndex
      const rowIndex = coordinates.rowIndex
      const value = preparedOrder[key]
      const currentValue = sheetData[rowIndex][colIndex]
      if (!value || value === currentValue) continue

      sheetRange.getRange(rowIndex + 1, colIndex + 1).setValue(value)
    }
    return Response.updated(guid)
  }
}