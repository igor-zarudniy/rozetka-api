class InputKeeper {
    /** –ß–∏—Ç–∞—î –¥–∞–Ω—ñ –∑ –∞—Ä–∫—É—à–∞ Google Sheets
     * @param {string} spreadSheetId - ID —Ç–∞–±–ª–∏—Ü—ñ
     * @param {string} sheetName - –ù–∞–∑–≤–∞ –∞—Ä–∫—É—à–∞
     * @param {string} [readType='values'] - –¢–∏–ø —á–∏—Ç–∞–Ω–Ω—è
     * @returns {Object|Sheet} –î–∞–Ω—ñ –∞–±–æ –∞—Ä–∫—É—à*/
    static readSheetData(spreadSheetId, sheetName, readType = 'values') {
      console.log(`InputKeeper: –ß–∏—Ç–∞—é —Ç–∞–±–ª–∏—Ü—é ${spreadSheetId}. –ê—Ä–∫—É—à: ${sheetName}. –¢–∏–ø —á–∏—Ç–∞–Ω–Ω—è: ${readType}`)
      const sheetRange = SpreadsheetApp.openById(spreadSheetId).getSheetByName(sheetName)
  
      if (readType != 'values') return sheetRange
      const sheetData = sheetRange.getDataRange().getValues()
      return { sheetRange, sheetData }
    }
  
    /** –°—Ç–≤–æ—Ä—é—î –º–∞–ø—É –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–Ω—è –∑ –¥–∞–Ω–∏—Ö –∞—Ä–∫—É—à–∞ –¥–æ –∑—É—Å—Ç—Ä—ñ—á—ñ –∑—ñ —Å—Ç–æ–ø–µ—Ä–æ–º
     * @param {Object} params - –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü—ñ—ó
     * @param {Array} params.sheetData - –î–∞–Ω—ñ –∞—Ä–∫—É—à–∞
     * @param {string} keyHeader - –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ–ª–æ–Ω–∫–∏ –∑ –∫–ª—é—á–∞–º–∏
     * @param {string} valueHeader - –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ–ª–æ–Ω–∫–∏ –∑—ñ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏
     * @returns {Object} –ú–∞–ø–∞ –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–Ω—è*/
    static createMapToStop(sheetData, keyHeader, valueHeader) {
      const { rowIndex, colIndex } = this.findHeaderCoordinates(sheetData, keyHeader)
      const valueHeaderCoordinates = this.findColumnIndexInRow(sheetData, rowIndex, colIndex, valueHeader)
  
      const resultMap = {}
      let currentRowIndex = rowIndex + 1
  
      while (sheetData[currentRowIndex][colIndex] !== 'stop') {
  
        let key = sheetData[currentRowIndex][colIndex]
        let value = sheetData[currentRowIndex][valueHeaderCoordinates]
        resultMap[key] = value
  
        !value && delete resultMap[key]
        currentRowIndex++
      }
      return resultMap
    }
  
  
    /** –ó–Ω–∞—Ö–æ–¥–∏—Ç—å —ñ–Ω–¥–µ–∫—Å –∫–æ–ª–æ–Ω–∫–∏ –∑ –ø–æ—Ç—Ä—ñ–±–Ω–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –≤ —Ä—è–¥–∫—É
     * @param {Array} sheetData - –î–∞–Ω—ñ –∞—Ä–∫—É—à–∞
     * @param {number} searchRowIndex - –Ü–Ω–¥–µ–∫—Å —Ä—è–¥–∫–∞ –¥–ª—è –ø–æ—à—É–∫—É
     * @param {number} searchColIndex - –Ü–Ω–¥–µ–∫—Å –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –ø–æ—á–∞—Ç–∫—É –ø–æ—à—É–∫—É
     * @param {string} header - –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –ø–æ—à—É–∫—É
     * @returns {number} –Ü–Ω–¥–µ–∫—Å –∑–Ω–∞–π–¥–µ–Ω–æ—ó –∫–æ–ª–æ–Ω–∫–∏*/
    static findColumnIndexInRow(sheetData, searchRowIndex, searchColIndex, header) {
      for (let colIndex = searchColIndex + 1; colIndex < sheetData[searchRowIndex].length; colIndex++) {
        const currentHeader = `${sheetData[searchRowIndex][colIndex]}`
        const targetHeader = `${header}`
  
        if (currentHeader === targetHeader) return colIndex
      }
    }
  
    /** –ó–Ω–∞—Ö–æ–¥–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –≤ –¥–∞–Ω–∏—Ö –∞—Ä–∫—É—à–∞
     * @param {Array} sheetData - –î–∞–Ω—ñ –∞—Ä–∫—É—à–∞
     * @param {string} header - –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –ø–æ—à—É–∫—É
     * @returns {Object} –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ { rowIndex, colIndex }*/
    static findHeaderCoordinates(sheetData, header) {
      for (let rowIndex = 0; rowIndex < sheetData.length; rowIndex++) {
        for (let colIndex = 0; colIndex < sheetData[rowIndex].length; colIndex++) {
          const currentHeader = `${sheetData[rowIndex][colIndex]}`
          const targetHeader = `${header}`
  
          if (currentHeader === targetHeader) return { rowIndex, colIndex }
        }
      }
    }
  
    /** –ú–∞–ø–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ –¥–∞–Ω–∏—Ö –∞—Ä–∫—É—à–∞
     * @param {Array} sheetData - –î–∞–Ω—ñ –∞—Ä–∫—É—à–∞
     * @param {Object} headerMap - –ú–∞–ø–∞ –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ –¥–ª—è –æ–±—Ä–æ–±–∫–∏*/
    static mapHeadersToCoordinates(sheetData, headerMap) {
      for (let key in headerMap) {
        const header = headerMap[key]
        const coordinates = this.findHeaderCoordinates(sheetData, header)
        if (!coordinates) continue
        const { rowIndex, colIndex } = coordinates
        headerMap[key] = { header, colIndex, rowIndex }
      }
    }
  
    /** –ë—É–¥—É—î –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∑ –¥–∞–Ω–∏—Ö –ª–æ–∫–∞–ª—ñ–∑–∞—Ç–æ—Ä–∞
       * @param {Object} params - –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü—ñ—ó
       * @param {string} params.sheetName - –ù–∞–∑–≤–∞ –∞—Ä–∫—É—à–∞
       * @param {Object} [sheetConfigurations={}] - –Ü—Å–Ω—É—é—á—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
       * @returns {Object} –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏*/
    static buildSheetSettings({ sheetName }, sheetConfigurations = {}) {
      const { rowIndex, colIndex } = this.findHeaderCoordinates(LOCALIZER, 'localizer')
      const colIndices = this.getSettingsColIndices(sheetName)
      let currentRowIndex = rowIndex + 1
  
      while (LOCALIZER[currentRowIndex][colIndex] !== 'stop') {
        const rowData = LOCALIZER[currentRowIndex]
        const key = rowData[colIndex]
        const header = rowData[colIndices.headers]
        const actualHeader = rowData[colIndices.actualHeader]
        const custom = rowData[colIndices.custom]
  
        sheetConfigurations[key] = {}
        const [reading_type, direction, rawStep, data_type] = `${rowData[colIndices.navigation]}`.split(', ')
        const step = typeof rawStep === 'number' ? rawStep : Number(rawStep)
        const navigation = { reading_type, direction, step, data_type }
  
        sheetConfigurations[key] = { navigation, header }
  
        if (actualHeader) sheetConfigurations[key].actualHeader = actualHeader
        if (custom) sheetConfigurations[key].custom = custom
  
        !header && delete sheetConfigurations[key]
        currentRowIndex++
      }
      console.warn(`InputKeeper: –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –∞—Ä–∫—É—à–∞ "${sheetName}" —Å—Ç–≤–æ—Ä–µ–Ω–æ`)
      return sheetConfigurations
    }
  
    /** –û—Ç—Ä–∏–º—É—î —ñ–Ω–¥–µ–∫—Å–∏ –∫–æ–ª–æ–Ω–æ–∫ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –¥–ª—è –∞—Ä–∫—É—à–∞
     * @param {string} sheetName - –ù–∞–∑–≤–∞ –∞—Ä–∫—É—à–∞
     * @returns {Object} –Ü–Ω–¥–µ–∫—Å–∏ –∫–æ–ª–æ–Ω–æ–∫ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å*/
    static getSettingsColIndices(sheetName) {
      return {
        headers: InputKeeper.findHeaderCoordinates(LOCALIZER, sheetName).colIndex,
        navigation: InputKeeper.findHeaderCoordinates(LOCALIZER, `‚öôÔ∏è${sheetName}`).colIndex,
        actualHeader: InputKeeper.findHeaderCoordinates(LOCALIZER, `üè∑Ô∏è${sheetName}`).colIndex,
        custom: InputKeeper.findHeaderCoordinates(LOCALIZER, `üé®${sheetName}`).colIndex
      }
    }
  
    /** –í–∏—Ç—è–≥—É—î —Ç–∞ –æ–±—Ä–æ–±–ª—è—î –¥–∞–Ω—ñ –∑ –∫–æ–ª–æ–Ω–∫–∏ –∞—Ä–∫—É—à–∞
     * @param {Array} sheetData - –î–∞–Ω—ñ –∞—Ä–∫—É—à–∞
     * @param {Object} params - –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è
     * @param {string} params.actualHeader - –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –ø–æ—à—É–∫—É –ø–æ–∑–∏—Ü—ñ—ó
     * @param {string} params.header - –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ–ª–æ–Ω–∫–∏ –∑ –¥–∞–Ω–∏–º–∏
     * @param {Object} params.navigation - –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–∫–∏
     * @returns {Array} –ú–∞—Å–∏–≤ –æ–±—Ä–æ–±–ª–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö*/
    static extractColumnData(sheetData, sheetConfigurations, actualKey, header, data_type) {
      const actualHeader = sheetConfigurations[actualKey].header
      const { rowIndex, colIndex } = this.findHeaderCoordinates(sheetData, actualHeader)
      const headerColIndex = this.findHeaderCoordinates(sheetData, header).colIndex
      let currentRowIndex = rowIndex + 1
      let resultArray = []
  
      while (sheetData[currentRowIndex][colIndex]) {
        const rawValue = sheetData[currentRowIndex][headerColIndex]
        const processedValue = this.formatValue(data_type, rawValue)
        resultArray.push(processedValue)
        currentRowIndex++
      }
      return resultArray
    }
  
  
    static generateVirtualData(formData, sheetConfigurations) {
  
      for (let key in sheetConfigurations) {
        let processedValue
        if (key === 'index') processedValue = Array.from({ length: formData.breed.length }, (_, index) => 1 + index)
        if (key === 'dateUpdate') processedValue = DateManager.getCurrentFormattedDate()
        if (key === 'status' && !formData.status) processedValue = sheetConfigurations[key].custom
        if (processedValue) formData[key] = processedValue
      }
    }
    /** –ß–∏—Ç–∞—î —Ç–∞ —Ñ–æ—Ä–º–∞—Ç—É—î –∑–Ω–∞—á–µ–Ω–Ω—è –∑ –∞—Ä–∫—É—à–∞ –∑–∞ –Ω–∞–ø—Ä—è–º–∫–æ–º
    * @param {Array} sheetData - –î–∞–Ω—ñ –∞—Ä–∫—É—à–∞
    * @param {string} header - –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –ø–æ—à—É–∫—É –ø–æ–∑–∏—Ü—ñ—ó
    * @param {string} direction - –ù–∞–ø—Ä—è–º–æ–∫ —á–∏—Ç–∞–Ω–Ω—è
    * @param {number} step - –ö—Ä–æ–∫ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è
    * @param {string} data_type - –¢–∏–ø –¥–∞–Ω–∏—Ö –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
    * @param {*} rawValue - –°–∏—Ä–µ –∑–Ω–∞—á–µ–Ω–Ω—è
    * @returns {*} –í—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è*/
    static readFormattedValue(sheetData, header, direction, step, data_type, rawValue) {
      let { rowIndex, colIndex } = this.findHeaderCoordinates(sheetData, header)
      if (direction === 'down') rawValue = sheetData[rowIndex + step][colIndex]
      else if (direction === 'up') rawValue = sheetData[rowIndex - step][colIndex]
      else if (direction === 'right') rawValue = sheetData[rowIndex][colIndex + step]
      else if (direction === 'left') rawValue = sheetData[rowIndex][colIndex - step]
      const processedValue = this.formatValue(data_type, rawValue)
      return processedValue
    }
  
  
    /** –§–æ—Ä–º–∞—Ç—É—î –∑–Ω–∞—á–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ —Ç–∏–ø—É –¥–∞–Ω–∏—Ö
     * @param {string} data_type - –¢–∏–ø –¥–∞–Ω–∏—Ö –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
     * @param {*} rawValue - –°–∏—Ä–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏
     * @returns {*} –í—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è*/
    static formatValue(data_type, rawValue) {
      if (data_type === 'date') return rawValue ? DateManager.formatDate(rawValue) : DateManager.getCurrentFormattedDate()
      if (data_type === 'hour') return DateManager.formatTime(rawValue)
      if (data_type === 'numeric') return rawValue ? parseFloat(rawValue.toFixed(2)) : 0
      return rawValue
    }
  
    /** –ü–æ–≤–µ—Ä—Ç–∞—î –æ–±‚Äô—î–∫—Ç –¥–µ—Ç–∞–ª–µ–π –∑ —Ä—è–¥–∫–∞ –∑–∞ —ñ–Ω–¥–µ–∫—Å–∞–º–∏ –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—ó.
     * @param {Array} rowData ‚Äî –¥–∞–Ω—ñ —Ä—è–¥–∫–∞.
     * @param {Object} localization ‚Äî –∫–∞—Ä—Ç–∞ –∫–æ–ª–æ–Ω–æ–∫.
     * @param {Object} details ‚Äî –æ–±‚Äô—î–∫—Ç –¥–ª—è –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è (–æ–ø—Ü—ñ–π–Ω–æ).
     * @returns {Object} –û–±‚Äô—î–∫—Ç –∑ –¥–µ—Ç–∞–ª—è–º–∏.*/
    static mapRowData(rowData, headerMap, extractedData = {}) {
      for (let key in headerMap) {
        const colIndex = headerMap[key].colIndex
        const value = rowData[colIndex]
  
        extractedData[key] = value
      }
      return extractedData
    }
  }